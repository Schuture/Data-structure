import time

'''顾名思义，并查集有两个功能：
   合并集合、查找集合根节点'''
   
class DSU(): 
    def __init__(self, N):
        # 每个不连通的集合都有一个根节点，所有集合的所有元素保存在同一个数组中
        # p存放每个节点的上一级节点索引，例如索引为x的上一级节点索引是p[x]
        self.p = list(range(N)) 
        
    def find(self, x): # 找到节点x的根节点
        if self.p[x] != x: # 当节点是根节点时，它的上一级节点就是自身
            # 将节点p[x]不断递归换成更上级节点，再次查找时可以利用这次替换的结果省时
            self.p[x] = self.find(self.p[x]) 
        return self.p[x]
    
    def union(self, x, y):  # 将两个节点x,y的集合合并
        xr = self.find(x)
        yr = self.find(y)
        if xr != yr:
            self.p[xr] = yr # 令一个根节点的上级节点为另一个根节点

'''Leetcode 959
在由 1 x 1 方格组成的 N x N 网格 grid 中，每个 1 x 1 方块由 /、\ 或空格构成。
这些字符会将方块划分为一些共边的区域。

（请注意，反斜杠字符是转义的，因此 \ 用 "\\" 表示。）。

返回区域的数目。
'''
# grid中的点定义：
# -------------
# |     0     |
# |  1     2  |
# |     3     |
# -------------
class Solution(object):
    def regionsBySlashes(self, grid):
        N = len(grid)
        dsu = DSU(4 * N * N) # 一个grid中有四个点，分别代表东南西北
        for r, row in enumerate(grid):
            for c, val in enumerate(row):
                root = 4 * (r*N + c) # 第 r*N + c个格子，从0开始数
                if val in '/ ': # '/' 和 ' '
                    dsu.union(root + 0, root + 1) # 西、北连通
                    dsu.union(root + 2, root + 3) # 东、南连通
                if val in '\ ':
                    dsu.union(root + 0, root + 2) # 东、北连通
                    dsu.union(root + 1, root + 3) # 西、南连通

                if r+1 < N: dsu.union(root + 3, (root+4*N) + 0) # 跟下面格子连通
                if r-1 >= 0: dsu.union(root + 0, (root-4*N) + 3) # 跟上面连通
                if c+1 < N: dsu.union(root + 2, (root+4) + 1) # 跟右边连通
                if c-1 >= 0: dsu.union(root + 1, (root-4) + 2) # 跟左边连通
        # 查找所有节点中有几个根节点，就是几个连通集
        return sum(dsu.find(x) == x for x in range(4*N*N)) 
    
A = [" /","/ "]
B = [" /", "  "]
C = ["\\/", "/\\"]
D = ["/ //  \\//\\\\\\\\\\\\//\\/ ///  \\\\ /\\","/\\/ /\\\\ \\/\\ \\\\\\  \\ ////\\ / \\ /","\\\\\\/\\/// /\\\\/\\//// \\\\/\\\\ //\\\\\\"," \\\\//\\/\\//// \\  /\\ / \\///  \\\\ ","/\\\\/ \\/\\/\\/\\\\\\//\\\\/\\/\\/\\/ \\/ /"," //\\/\\\\\\ \\\\\\  \\ \\/\\\\//\\/\\/\\\\\\/","/ \\/\\\\/ /\\\\\\//\\/\\\\ /\\\\\\ /\\\\/\\\\","\\\\/// ////\\/ \\\\/ \\  /\\\\\\\\ \\/ \\","\\\\\\// //  ///\\//\\\\/ //\\\\/ /\\\\\\"," \\ ///\\/\\\\ /// \\\\ \\ \\ \\  \\  \\\\","/\\ \\\\\\\\/\\//\\//\\/\\ \\\\//\\ \\/\\// ","/\\\\/ \\/  \\/\\   /\\/  /\\\\/ /\\ \\ ","// \\\\/ /\\ / ///\\//\\ /  \\\\ \\ //","\\\\//\\\\ // /\\ /\\\\\\ /\\\\\\/ \\ / \\/","\\ /\\/\\\\\\  /\\/\\//\\ / \\\\\\\\ /\\\\\\\\","/ \\\\/\\/\\ \\\\\\\\/ \\\\\\ \\//\\\\\\\\/ \\/","\\\\/\\///\\ ///\\\\//\\\\/ \\\\/\\//\\\\\\/","\\ /   \\\\/ \\  \\\\//\\/\\\\\\\\\\\\\\\\\\ \\","\\\\/\\ / \\/  \\\\\\///\\ \\  \\/\\\\\\ \\/","\\/ \\\\// \\ /\\/  \\/\\\\\\/ \\ \\///\\ ","///\\/ ///\\ \\\\\\\\\\///// \\/\\//\\\\ ","\\//\\  \\ /\\\\\\/// /\\  /\\/\\ \\ /  ","/\\////\\\\\\\\// //\\//\\\\/\\/\\/\\/\\\\ ","//////\\/\\ \\/ \\\\  /// /\\//\\//\\/","\\\\/ ///\\ ///\\/\\ \\\\\\/// \\ ///\\ ","///\\ \\ ///\\\\/\\ // \\\\/\\\\  \\/\\/\\","/\\/\\\\/\\//\\\\\\\\\\/////\\//\\\\\\\\\\/ \\","\\\\ //    /\\\\  /\\\\/\\//\\  /\\ //\\","\\/\\\\/  / \\\\ \\\\\\ \\//\\ \\\\ \\/\\\\/ ","///\\/\\/ \\/\\\\ /\\//\\//\\ /\\\\\\\\ / "]
begin = time.time()
print(Solution().regionsBySlashes(D))
print('Costing {} ms'.format((time.time()-begin)*1000))